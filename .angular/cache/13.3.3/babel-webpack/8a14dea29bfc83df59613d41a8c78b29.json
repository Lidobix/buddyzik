{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\33652\\\\Documents\\\\Projets persos\\\\buddyzik\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as moment from 'moment';\nimport { lastValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./server.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"./displaying-elements.service\";\nimport * as i5 from \"./profile.service\";\nmoment().format();\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, // private buddyService: BuddyService,\n    serverService, router, displayingElementsService, profileService) {\n      this.http = http;\n      this.serverService = serverService;\n      this.router = router;\n      this.displayingElementsService = displayingElementsService;\n      this.profileService = profileService;\n      this.minimumAge = 18;\n      this.pictureExtension = ['jpg', 'jpeg', 'png', 'bmp', 'svg', 'gif', 'webp', 'JPG', 'JPEG', 'PNG', 'BMP', 'SVG', 'GIF', 'WEBP'];\n      this.passwordPattern = '^[^<>](?=.{8,}$)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*\\\\W).*[^<>]$';\n    } // newUser!: Buddy;\n\n\n    ngOnInit() {\n      console.log('redémarrage AuthService');\n    }\n\n    logout() {\n      this.displayingElementsService.setDisplayNav(false); // this.displayingElementsService.setDisplayModif(false);\n\n      localStorage.clear();\n      this.router.navigateByUrl('/auth/login');\n    } // public isLoggedIn() {\n    //   return moment().isBefore(this.getExpiration());\n    // }\n    // isLoggedOut() {\n    //   return !this.isLoggedIn();\n    // }\n\n\n    getMyToken() {\n      // console.log('fetch du token');\n      this.myToken = localStorage.getItem('token');\n\n      if (this.myToken != null && this.myToken != undefined) {\n        return this.myToken;\n      } else {\n        alert(\"Problème d'identification, vous allez être déconnecté\");\n        this.logout();\n      }\n    }\n\n    getMyId() {\n      // console.log('fetch du uuid');\n      this.myID = localStorage.getItem('uuid'); // console.log(this.myID);\n\n      if (this.myID != null && this.myID != undefined) {\n        // console.log(this.myID);\n        return this.myID;\n      } else {\n        alert(\"Problème d'identification, vous allez être déconnecté\");\n        this.logout();\n      }\n    }\n\n    getAuth() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this.isLogged = yield lastValueFrom(_this.http.get(_this.serverService.serverUrl + '/auth'));\n      })();\n    } // getExpiration() {\n    //   const expiration = localStorage.getItem('expires_at');\n    //   console.log('expiration', expiration);\n    //   console.log('moment : ', moment());\n    //   // const expiresAt = JSON.parse(expiration);\n    //   // return moment(expiresAt);\n    //   return 12;\n    // }\n\n\n    authUser(form, route) {\n      if (!form.valid) {\n        alert('Formulaire non valide!');\n      } else {\n        try {\n          this.http.post(this.serverService.serverUrl + route, form.value).subscribe(authentication => {\n            if (authentication.success === true) {\n              alert(authentication.message);\n              localStorage.setItem('token', authentication.token);\n              localStorage.setItem('uuid', authentication.user.uuid); // this.buddyService.userIdBuilder(authentication.user);\n\n              this.profileService.goToProfile(authentication.user.uuid); // this.router.navigateByUrl('/home');\n            } else {\n              alert(authentication.message);\n            }\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }\n\n    updatehUser(form, route) {\n      if (!form.valid) {\n        alert('Formulaire non valide!');\n      } else {\n        try {\n          console.log('soumission du formulaire...');\n          this.http.post(this.serverService.serverUrl + route, form.value).subscribe(res => {\n            console.log(res);\n            alert(res.message);\n            console.log('route = ', route); // if (authentication.success === true) {\n            //   alert(authentication.message);\n            //   localStorage.setItem('token', authentication.token);\n            //   localStorage.setItem('uuid', authentication.user.uuid);\n            //   // this.buddyService.userIdBuilder(authentication.user);\n\n            if (res.token != undefined) {\n              localStorage.setItem('token', res.token);\n            } //   this.router.navigateByUrl('/home');\n            // } else {\n            //   alert(authentication.message);\n            // }\n\n\n            if (route === '/updateprofile' && res.success === true) {\n              this.profileService.goToProfile(this.getMyId()); // this.router.navigateByUrl('/blankprofile');\n            }\n\n            if (route === '/updateprofile' && res.success === false) {\n              this.router.navigateByUrl('/edition'); // this.profileService.goToProfile(this.getMyId());\n              // this.router.navigateByUrl('/blankprofile');\n            }\n\n            if (route === '/sendpost') {\n              console.log('retour au profil'); // this.profileService.goToProfile(this.getMyId());\n\n              this.router.navigateByUrl('/blankprofile'); // this.profileService.goToProfile(this.getMyId());\n              // this.router.navigateByUrl('/edition');\n            }\n\n            if (route === '/resetpassword') {\n              this.router.navigateByUrl('/auth/login');\n            }\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ServerService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.DisplayingElementsService), i0.ɵɵinject(i5.ProfileService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}