{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./server.service\";\nimport * as i4 from \"./profile.service\";\nimport * as i5 from \"./displaying-elements.service\";\nexport let PostService = /*#__PURE__*/(() => {\n  class PostService {\n    constructor(http, router, serverService, profileService, route, displayingElementsService) {\n      this.http = http;\n      this.router = router;\n      this.serverService = serverService;\n      this.profileService = profileService;\n      this.route = route;\n      this.displayingElementsService = displayingElementsService;\n    }\n\n    getAllPosts(buddyTarget) {\n      // console.log('recherche des posts sur le serveur....de ', buddyTarget);\n      return this.http.post(this.serverService.serverUrl + '/downloadposts', {\n        target: buddyTarget\n      });\n    } // getAllPosts(buddyTarget: string): Observable<Post[]> {\n    //   console.log('recherche des posts sur le serveur....de ', buddyTarget);\n    //   return this.http.post<Post[]>(\n    //     this.serverService.serverUrl + '/downloadposts',\n    //     { target: buddyTarget }\n    //   );\n    // }\n\n\n    uploadPost(form, route, buddyTarget) {\n      if (!form.valid) {\n        alert('Formulaire non valide!');\n      } else {\n        try {\n          console.log('soumission du formulaire...');\n          return this.http.post(this.serverService.serverUrl + route, form.value).subscribe(res => {\n            console.log('res', res); // this.displayingElementsService.setdisplayValidationModalPost(true);\n            // alert(res.message);\n\n            console.log('route = ', route); // this.getAllPosts('869cd705-5d80-47e5-954d-84f2515fd7ad');\n            // this.profileService.goToProfile(buddyTarget);\n            // this.router.navigateByUrl('/blankprofile');\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }\n\n  }\n\n  PostService.ɵfac = function PostService_Factory(t) {\n    return new (t || PostService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ServerService), i0.ɵɵinject(i4.ProfileService), i0.ɵɵinject(i2.ActivatedRoute), i0.ɵɵinject(i5.DisplayingElementsService));\n  };\n\n  PostService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostService,\n    factory: PostService.ɵfac,\n    providedIn: 'root'\n  });\n  return PostService;\n})();","map":null,"metadata":{},"sourceType":"module"}