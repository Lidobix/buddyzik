{"ast":null,"code":"import * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./buddy.service\";\nimport * as i3 from \"./server.service\";\nimport * as i4 from \"@angular/router\";\nmoment().format();\nexport class AuthService {\n  constructor(http, buddyService, serverService, router) {\n    this.http = http;\n    this.buddyService = buddyService;\n    this.serverService = serverService;\n    this.router = router;\n    this.minimumAge = 18;\n    this.pictureExtension = ['jpg', 'jpeg', 'png', 'bmp', 'svg', 'gif'];\n    this.passwordPattern = '^[^<>](?=.{8,}$)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*\\\\W).*[^<>]$';\n  } // newUser!: Buddy;\n\n\n  ngOnInit() {\n    console.log('redémarrage AuthService');\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expiresIn');\n    localStorage.removeItem('expires_at');\n    localStorage.removeItem('friends');\n    localStorage.removeItem('uuid'); // this.buddyService.connectedUser.connected = false;\n    // this.http\n    //   .post<any>(\n    //     this.serverService.serverUrl + '/logout',\n    //     this.buddyService.connectedUser.uuid\n    //   )\n    //   .subscribe((retour) => {});\n\n    this.router.navigateByUrl('/auth/login'); // this.buddyService.userIdBuilder(new Buddy());\n  } // private setSession(authResult) {\n  //   const expiresAt = moment().add(authResult.expiresIn, 'second');\n  //   localStorage.setItem('id_token', authResult.token);\n  //   localStorage.setItem('expires_at', JSON.stringify(expiresAt.valueOf()));\n  // }\n\n\n  isLoggedIn() {\n    return moment().isBefore(this.getExpiration());\n  }\n\n  isLoggedOut() {\n    return !this.isLoggedIn();\n  }\n\n  getAuth() {\n    console.log('Authentification en cours...');\n    let b;\n    const obs$ = this.http.post(this.serverService.serverUrl + '/auth', '');\n\n    function getValueFromObservable() {\n      return new Promise(resolve => {\n        this.http.post(this.serverService.serverUrl + '/auth', '').subscribe(data => {\n          console.log(data);\n          resolve(data);\n        });\n      });\n    }\n\n    const aa = obs$.subscribe(value => {\n      b = value;\n      console.log('value =', value);\n      return value;\n    }); //     async function checkToken {\n    // try {\n\n    console.log('aa = ', aa);\n    console.log('b = ', b); //   .subscribe((value) => {\n    //     console.log('value = ', value);\n    //     this.presenceToken = value;\n    //   });\n    // } catch (error) {\n    // }\n    //     }\n    // console.log('aa = ', aa);\n    // return this.presenceToken;\n    // return this.http.post<boolean>(this.serverService.serverUrl + '/auth', '');\n  }\n\n  getExpiration() {\n    const expiration = localStorage.getItem('expires_at');\n    console.log('expiration', expiration);\n    console.log('moment : ', moment()); // const expiresAt = JSON.parse(expiration);\n    // return moment(expiresAt);\n\n    return 12;\n  } // fetchAutoStartAuth() {\n  //   console.log('dans la foncton fetchAutoStartAuth');\n  //   return this.http\n  //     .get<boolean>(this.serverService.serverUrl + '/auth')\n  //     .subscribe((retour) => {\n  //       console.log(\"retour du serveur du check token à l'ouverture: \", retour);\n  //       return retour;\n  //     });\n  // }\n\n\n  authUser(form, route // messageValidation: string,\n  // messageError: string\n  ) {\n    // console.log('dans le service + submitForm');\n    // console.log('route : ', route);\n    // console.log(form);\n    if (!form.valid) {\n      alert('Formulaire non valide!');\n    } else {\n      try {\n        // console.log('dans le try, le form; ', form.value);\n        this.http.post(this.serverService.serverUrl + route, form.value).subscribe(authentication => {\n          // console.log('Le serveur a dit ', authentication);\n          // console.log('friends_list ', authentication.user.friends_list);\n          if (authentication.success === true) {\n            alert(authentication.message);\n            localStorage.setItem('token', authentication.token);\n            localStorage.setItem('uuid', authentication.user.uuid);\n            this.buddyService.userIdBuilder(authentication.user);\n            this.router.navigateByUrl('/home');\n          } else {\n            alert(authentication.message);\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.BuddyService), i0.ɵɵinject(i3.ServerService), i0.ɵɵinject(i4.Router));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/33652/Documents/Projets persos/buddyzik/src/services/auth.service.ts"],"names":["moment","i0","i1","i2","i3","i4","format","AuthService","constructor","http","buddyService","serverService","router","minimumAge","pictureExtension","passwordPattern","ngOnInit","console","log","logout","localStorage","removeItem","navigateByUrl","isLoggedIn","isBefore","getExpiration","isLoggedOut","getAuth","b","obs$","post","serverUrl","getValueFromObservable","Promise","resolve","subscribe","data","aa","value","expiration","getItem","authUser","form","route","valid","alert","authentication","success","message","setItem","token","user","uuid","userIdBuilder","error","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","BuddyService","ServerService","Router","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import * as moment from 'moment';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"./buddy.service\";\r\nimport * as i3 from \"./server.service\";\r\nimport * as i4 from \"@angular/router\";\r\nmoment().format();\r\nexport class AuthService {\r\n    constructor(http, buddyService, serverService, router) {\r\n        this.http = http;\r\n        this.buddyService = buddyService;\r\n        this.serverService = serverService;\r\n        this.router = router;\r\n        this.minimumAge = 18;\r\n        this.pictureExtension = ['jpg', 'jpeg', 'png', 'bmp', 'svg', 'gif'];\r\n        this.passwordPattern = '^[^<>](?=.{8,}$)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*\\\\W).*[^<>]$';\r\n    }\r\n    // newUser!: Buddy;\r\n    ngOnInit() {\r\n        console.log('redémarrage AuthService');\r\n    }\r\n    logout() {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('expiresIn');\r\n        localStorage.removeItem('expires_at');\r\n        localStorage.removeItem('friends');\r\n        localStorage.removeItem('uuid');\r\n        // this.buddyService.connectedUser.connected = false;\r\n        // this.http\r\n        //   .post<any>(\r\n        //     this.serverService.serverUrl + '/logout',\r\n        //     this.buddyService.connectedUser.uuid\r\n        //   )\r\n        //   .subscribe((retour) => {});\r\n        this.router.navigateByUrl('/auth/login');\r\n        // this.buddyService.userIdBuilder(new Buddy());\r\n    }\r\n    // private setSession(authResult) {\r\n    //   const expiresAt = moment().add(authResult.expiresIn, 'second');\r\n    //   localStorage.setItem('id_token', authResult.token);\r\n    //   localStorage.setItem('expires_at', JSON.stringify(expiresAt.valueOf()));\r\n    // }\r\n    isLoggedIn() {\r\n        return moment().isBefore(this.getExpiration());\r\n    }\r\n    isLoggedOut() {\r\n        return !this.isLoggedIn();\r\n    }\r\n    getAuth() {\r\n        console.log('Authentification en cours...');\r\n        let b;\r\n        const obs$ = this.http.post(this.serverService.serverUrl + '/auth', '');\r\n        function getValueFromObservable() {\r\n            return new Promise(resolve => {\r\n                this.http.post(this.serverService.serverUrl + '/auth', '').subscribe((data) => { console.log(data); resolve(data); });\r\n            });\r\n        }\r\n        const aa = obs$.subscribe((value) => {\r\n            b = value;\r\n            console.log('value =', value);\r\n            return value;\r\n        });\r\n        //     async function checkToken {\r\n        // try {\r\n        console.log('aa = ', aa);\r\n        console.log('b = ', b);\r\n        //   .subscribe((value) => {\r\n        //     console.log('value = ', value);\r\n        //     this.presenceToken = value;\r\n        //   });\r\n        // } catch (error) {\r\n        // }\r\n        //     }\r\n        // console.log('aa = ', aa);\r\n        // return this.presenceToken;\r\n        // return this.http.post<boolean>(this.serverService.serverUrl + '/auth', '');\r\n    }\r\n    getExpiration() {\r\n        const expiration = localStorage.getItem('expires_at');\r\n        console.log('expiration', expiration);\r\n        console.log('moment : ', moment());\r\n        // const expiresAt = JSON.parse(expiration);\r\n        // return moment(expiresAt);\r\n        return 12;\r\n    }\r\n    // fetchAutoStartAuth() {\r\n    //   console.log('dans la foncton fetchAutoStartAuth');\r\n    //   return this.http\r\n    //     .get<boolean>(this.serverService.serverUrl + '/auth')\r\n    //     .subscribe((retour) => {\r\n    //       console.log(\"retour du serveur du check token à l'ouverture: \", retour);\r\n    //       return retour;\r\n    //     });\r\n    // }\r\n    authUser(form, route\r\n    // messageValidation: string,\r\n    // messageError: string\r\n    ) {\r\n        // console.log('dans le service + submitForm');\r\n        // console.log('route : ', route);\r\n        // console.log(form);\r\n        if (!form.valid) {\r\n            alert('Formulaire non valide!');\r\n        }\r\n        else {\r\n            try {\r\n                // console.log('dans le try, le form; ', form.value);\r\n                this.http\r\n                    .post(this.serverService.serverUrl + route, form.value)\r\n                    .subscribe((authentication) => {\r\n                    // console.log('Le serveur a dit ', authentication);\r\n                    // console.log('friends_list ', authentication.user.friends_list);\r\n                    if (authentication.success === true) {\r\n                        alert(authentication.message);\r\n                        localStorage.setItem('token', authentication.token);\r\n                        localStorage.setItem('uuid', authentication.user.uuid);\r\n                        this.buddyService.userIdBuilder(authentication.user);\r\n                        this.router.navigateByUrl('/home');\r\n                    }\r\n                    else {\r\n                        alert(authentication.message);\r\n                    }\r\n                });\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n}\r\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.BuddyService), i0.ɵɵinject(i3.ServerService), i0.ɵɵinject(i4.Router)); };\r\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}