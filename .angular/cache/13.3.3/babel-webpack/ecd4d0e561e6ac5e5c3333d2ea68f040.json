{"ast":null,"code":"import * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./buddy.service\";\nimport * as i3 from \"./server.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"ngx-cookie-service\";\nmoment().format();\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, buddyService, serverService, router, cookieService) {\n      this.http = http;\n      this.buddyService = buddyService;\n      this.serverService = serverService;\n      this.router = router;\n      this.cookieService = cookieService;\n      this.minimumAge = 18;\n      this.pictureExtension = ['jpg', 'jpeg', 'png', 'bmp', 'svg', 'gif'];\n      this.passwordPattern = '^[^<>](?=.{8,}$)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*\\\\W).*[^<>]$';\n    } // newUser!: Buddy;\n\n\n    ngOnInit() {\n      console.log('redémarrage AuthService');\n    }\n\n    logout() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('expiresIn');\n      localStorage.removeItem('expires_at');\n      localStorage.removeItem('friends');\n      localStorage.removeItem('uuid'); // this.buddyService.connectedUser.connected = false;\n      // this.http\n      //   .post<any>(\n      //     this.serverService.serverUrl + '/logout',\n      //     this.buddyService.connectedUser.uuid\n      //   )\n      //   .subscribe((retour) => {});\n\n      this.router.navigateByUrl('/login'); // this.buddyService.userIdBuilder(new Buddy());\n    } // private setSession(authResult) {\n    //   const expiresAt = moment().add(authResult.expiresIn, 'second');\n    //   localStorage.setItem('id_token', authResult.token);\n    //   localStorage.setItem('expires_at', JSON.stringify(expiresAt.valueOf()));\n    // }\n\n\n    isLoggedIn() {\n      return moment().isBefore(this.getExpiration());\n    }\n\n    isLoggedOut() {\n      return !this.isLoggedIn();\n    }\n\n    getAuth() {\n      console.log(\"Authentification à l'ouverture de l'appli...\");\n      return this.http.get(this.serverService.serverUrl + '/auth', {\n        headers: {\n          'responseType:': 'json'\n        }\n      });\n    }\n\n    getExpiration() {\n      const expiration = localStorage.getItem('expires_at');\n      console.log('expiration', expiration);\n      console.log('moment : ', moment()); // const expiresAt = JSON.parse(expiration);\n      // return moment(expiresAt);\n\n      return 12;\n    } // fetchAutoStartAuth() {\n    //   console.log('dans la foncton fetchAutoStartAuth');\n    //   return this.http\n    //     .get<boolean>(this.serverService.serverUrl + '/auth')\n    //     .subscribe((retour) => {\n    //       console.log(\"retour du serveur du check token à l'ouverture: \", retour);\n    //       return retour;\n    //     });\n    // }\n\n\n    authUser(form, route // messageValidation: string,\n    // messageError: string\n    ) {\n      // console.log('dans le service + submitForm');\n      // console.log('route : ', route);\n      // console.log(form);\n      if (!form.valid) {\n        alert('Formulaire non valide!');\n      } else {\n        try {\n          // console.log('dans le try, le form; ', form.value);\n          this.http.post(this.serverService.serverUrl + route, form.value).subscribe(authentication => {\n            // console.log('Le serveur a dit ', authentication);\n            // console.log('friends_list ', authentication.user.friends_list);\n            if (authentication.success === true) {\n              alert(authentication.message);\n              localStorage.setItem('token', authentication.token);\n              localStorage.setItem('uuid', authentication.user.uuid);\n              this.buddyService.userIdBuilder(authentication.user);\n              this.router.navigateByUrl('/home');\n            } else {\n              alert(authentication.message);\n            }\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.BuddyService), i0.ɵɵinject(i3.ServerService), i0.ɵɵinject(i4.Router), i0.ɵɵinject(i5.CookieService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}